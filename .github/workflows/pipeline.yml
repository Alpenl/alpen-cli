name: CI/CD Pipeline

# 触发条件:
# 1. Push 到 main/dev 分支 - 运行完整质量检查
# 2. Pull Request 到 main/dev - 运行完整质量检查
# 3. 推送版本标签 (v*) - 运行检查 + 构建正式发布包
# 4. 手动触发 (workflow_dispatch) - 运行完整流程 + 构建测试包
on:
  push:
    branches: [main, dev]
    tags: ["v*"]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

# GitHub Actions 权限配置
permissions:
  contents: write  # 允许创建 Release
  packages: write  # 允许上传构建产物

jobs:
  # ============================================
  # Job 1: 代码质量检查 (总是运行)
  # ============================================
  quality-check:
    name: 代码质量检查
    runs-on: ubuntu-22.04

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔧 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.1'  # 与 go.mod 保持一致
          cache: true

      - name: 📝 检查代码格式
        run: |
          files=$(gofmt -l .)
          if [ -n "$files" ]; then
            echo "❌ 请运行 gofmt 修复以下文件:"
            echo "$files"
            exit 1
          fi
          echo "✅ 代码格式检查通过"

      - name: 🔍 静态代码检查
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.61  # 支持 Go 1.23
          args: --timeout=5m

      - name: 🧪 运行单元测试
        run: go test -v ./...

  # ============================================
  # Job 2: 构建 Debian 软件包
  # 条件: 版本标签 push 或手动触发（dev 分支仅手动触发）
  # ============================================
  build-deb:
    name: 构建 Debian 软件包
    needs: quality-check  # 依赖质量检查通过
    if: |
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-22.04
    timeout-minutes: 15  # 整个 job 最多 15 分钟

    env:
      GOFLAGS: "-mod=mod"
      GOPROXY: "https://proxy.golang.org,direct"  # 使用官方代理加速
      # Debian 包构建环境变量
      DEBEMAIL: "ci@alpen.dev"
      DEBFULLNAME: "Alpen CI Bot"

    steps:
      - name: 📥 检出代码仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史,便于版本号处理

      - name: 🔧 设置 Go 开发环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.1'
          cache: true
          cache-dependency-path: go.sum

      - name: 📦 安装打包工具
        timeout-minutes: 2
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq dpkg-dev

      - name: ⬇️  下载 Go 模块依赖
        timeout-minutes: 5
        run: |
          echo "开始下载 Go 模块..."
          go mod download -x
          echo "✅ 依赖下载完成"

      - name: 🏗️  构建二进制文件
        timeout-minutes: 3
        run: |
          echo "开始构建二进制文件..."

          # 提取版本号（去除 v 前缀）
          VERSION="${GITHUB_REF_NAME#v}"
          echo "版本号: $VERSION"

          go build -v -o alpen -ldflags="-s -w -X main.version=$VERSION" .
          chmod +x alpen
          ./alpen --version || ./alpen -v || echo "版本检查跳过"
          echo "✅ 二进制构建完成"

      - name: 📦 打包为 DEB
        timeout-minutes: 3
        run: |
          echo "开始打包 DEB..."

          # 提取版本号（去除 v 前缀，标签 push 时用标签，否则用开发版本）
          if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            VERSION="${GITHUB_REF_NAME#v}"
          else
            VERSION="0.0.0-dev+${GITHUB_SHA:0:7}"
          fi

          echo "包版本: $VERSION"

          # 创建包结构
          PKG_DIR="alpen-cli_${VERSION}_amd64"
          mkdir -p ${PKG_DIR}/DEBIAN
          mkdir -p ${PKG_DIR}/usr/bin

          # 复制二进制
          cp alpen ${PKG_DIR}/usr/bin/

          # 创建 control 文件
          cat > ${PKG_DIR}/DEBIAN/control <<EOF
          Package: alpen-cli
          Version: ${VERSION}
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: alpenl <yangyuyang91@gmail.com>
          Description: Alpen CLI - 团队脚本统一管理工具
           配置驱动的命令树架构，通过 YAML 配置自动生成 CLI 命令。
           .
           主要特性:
            - 动态命令注册与别名支持
            - 交互式菜单选择
            - 全局和项目级配置
            - 脚本仓库管理
          EOF

          # 构建 DEB 包
          dpkg-deb --build ${PKG_DIR}

          echo "✅ DEB 包构建完成"
          ls -lh *.deb

      - name: 📤 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: debian-packages-${{ github.sha }}
          path: "*.deb"
          retention-days: 30

      # 仅在标签推送时创建 GitHub Release
      - name: 🚀 创建 GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: "*.deb"
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## 📦 安装方法

            ### 一键安装（推荐）
            ```bash
            curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | sudo bash
            ```

            ### 手动安装
            ```bash
            # 1. 下载 .deb 包
            wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/alpen-cli_${{ github.ref_name }}_amd64.deb

            # 2. 安装
            sudo dpkg -i alpen-cli_${{ github.ref_name }}_amd64.deb

            # 3. 如有依赖问题
            sudo apt-get install -f
            ```

            ### 验证安装
            ```bash
            alpen --version  # 应输出: ${{ github.ref_name }}
            ```

            ---
            **完整更新日志**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
